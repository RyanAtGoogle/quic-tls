



Network Working Group                                         M. Thomson
Internet-Draft                                                   Mozilla
Intended status: Standards Track                          March 16, 2016
Expires: September 17, 2016


            Porting QUIC to Transport Layer Security (DTLS)
                     draft-thomson-quic-tls-latest

Abstract

   The QUIC experiment defines a custom security protocol.  This was
   necessary to gain handshake latency improvements.  This document
   describes how that security protocol might be replaced with TLS.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 17, 2016.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.





Thomson                Expires September 17, 2016               [Page 1]

Internet-Draft                QUIC over TLS                   March 2016


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   3
   2.  Protocol Overview . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Handshake Overview  . . . . . . . . . . . . . . . . . . .   4
   3.  QUIC over TLS Structure . . . . . . . . . . . . . . . . . . .   5
   4.  Mapping of QUIC to QUIC over TLS  . . . . . . . . . . . . . .   6
     4.1.  Protocol and Version Negotiation  . . . . . . . . . . . .   7
     4.2.  Source Address Validation . . . . . . . . . . . . . . . .   8
   5.  Record Protection . . . . . . . . . . . . . . . . . . . . . .   8
     5.1.  Key Update  . . . . . . . . . . . . . . . . . . . . . . .   9
   6.  Pre-handshake QUIC Messages . . . . . . . . . . . . . . . . .   9
     6.1.  QUIC Transport Parameters . . . . . . . . . . . . . . . .  10
       6.1.1.  The quic_transport_parameters Extension . . . . . . .  11
       6.1.2.  The quic_options Extension  . . . . . . . . . . . . .  12
     6.2.  Unprotected Frames Prior to Handshake Completion  . . . .  13
       6.2.1.  STREAM Frames . . . . . . . . . . . . . . . . . . . .  13
       6.2.2.  ACK Frames  . . . . . . . . . . . . . . . . . . . . .  13
       6.2.3.  WINDOW_UPDATE Frames  . . . . . . . . . . . . . . . .  13
       6.2.4.  FEC Packets . . . . . . . . . . . . . . . . . . . . .  14
     6.3.  Protected Frames Prior to Handshake Completion  . . . . .  14
   7.  QUIC Connection ID  . . . . . . . . . . . . . . . . . . . . .  15
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  16
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  16
   10. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  16
   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  16
     11.1.  Normative References . . . . . . . . . . . . . . . . . .  16
     11.2.  Informative References . . . . . . . . . . . . . . . . .  17
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  18

1.  Introduction

   QUIC [I-D.tsvwg-quic-protocol] provides a multiplexed transport for
   HTTP [RFC7230] semantics that provides several key advantages over
   HTTP/1.1 [RFC7230] or HTTP/2 [RFC7540] over TCP [RFC0793].

   The custom security protocol designed for QUIC provides critical
   latency improvements for connection establishment.  Absent packet
   loss, most new connections can be established with a single round
   trip; on subsequent connections between the same client and server,
   the client can often send application data immediately, that is, zero
   round trip setup.  TLS 1.3 uses a similar design and aims to provide
   the same set of improvements.

   This document describes how the standardized TLS 1.3 might serve as a
   security layer for QUIC.  The same design could work for TLS 1.2,




Thomson                Expires September 17, 2016               [Page 2]

Internet-Draft                QUIC over TLS                   March 2016


   though few of the benefits QUIC provides would be realized due to the
   handshake latency in versions of TLS prior to 1.3.

   Alternative Designs:  There are other designs that are possible; and
      many of these alternative designs are likely to be equally good.
      The point of this document is to articulate a coherent single
      design.  Notes like this throughout the document are used describe
      points where alternatives were considered.

1.1.  Notational Conventions

   The words "MUST", "MUST NOT", "SHOULD", and "MAY" are used in this
   document.  It's not shouting; when they are capitalized, they have
   the special meaning defined in [RFC2119].

2.  Protocol Overview

   QUIC [I-D.tsvwg-quic-protocol] can be separated into several modules:

   1.  The basic frame envelope describes the common packet layout.
       This layer includes connection identification, version
       negotiation, and includes the indicators that allow the framing,
       public reset, and FEC modules to be identified.

   2.  The public reset is an unprotected frame that allows an
       intermediary (an entity that is not part of the security context)
       to request the termination of a QUIC connection.

   3.  The forward error correction (FEC) module provides redundant
       entropy that allows for frames to be repaired in event of loss.

   4.  Framing comprises most of the QUIC protocol.  Framing provides a
       number of different types of frame, each with a specific purpose.
       Framing supports frames for both congestion management and stream
       multiplexing.  Framing additionally provides a liveness testing
       capability (the PING frame).

   5.  Crypto provides confidentiality and integrity protection for
       frames.  All frames are protected after the handshake completes
       on stream 1.  Prior to this, data is protected with the 0-RTT
       keys.

   6.  Multiplexed streams are the primary payload of QUIC.  These
       provide reliable, in-order delivery of data and are used to carry
       the encryption handshake and transport parameters (stream 1),
       HTTP header fields (stream 3), and HTTP requests and responses.
       Frames for managing multiplexing include those for creating and
       destroying streams as well as flow control and priority frames.



Thomson                Expires September 17, 2016               [Page 3]

Internet-Draft                QUIC over TLS                   March 2016


   7.  Congestion management includes packet acknowledgment and other
       signal required to ensure effective use of available link
       capacity.

   8.  HTTP mapping provides an adaptation to HTTP that is based on
       HTTP/2.

   The relative relationship of these components are pictorally
   represented in Figure 1.

      +----+------+
      | HS | HTTP |
      +----+------+------------+
      |  Streams  | Congestion |
      +-----------+------------+
      |        Frames          |
      +           +------------+
      |           |    FEC     +--------+
      +  +--------+------------+ Public |
      |  |     Crypto          | Reset  |
      +--+---------------------+--------+
      |              Envelope           |
      +---------------------------------+
      |                UDP              |
      +---------------------------------+

                                *HS = Crypto Handshake

                         Figure 1: QUIC Structure

   This document describes a replacement of the cryptographic parts of
   QUIC.  This includes the handshake messages that are exchanged on
   stream 1, plus the record protection that is used to encrypt and
   authenticate all other frames.

2.1.  Handshake Overview

   TLS 1.3 provides two basic handshake modes of interest to QUIC:

   o  A full handshake in which the client is able to send application
      data after one round trip and the server immediately after
      receiving the first message from the client.

   o  A 0-RTT handshake in which the client uses information about the
      server to send immediately.  This data can be replayed by an
      attacker so it MUST NOT carry a self-contained trigger for any
      non-idempotent action.




Thomson                Expires September 17, 2016               [Page 4]

Internet-Draft                QUIC over TLS                   March 2016


   A simplified TLS 1.3 handshake with 0-RTT application data is shown
   in Figure 2, see [I-D.ietf-tls-tls13] for more options.

       Client                                             Server

       ClientHello
      (Finished)
      (0-RTT Application Data)
      (end_of_early_data)        -------->
                                                     ServerHello
                                            {EncryptedExtensions}
                                            {ServerConfiguration}
                                                    {Certificate}
                                              {CertificateVerify}
                                                       {Finished}
                                <--------      [Application Data]
      {Finished}                -------->

      [Application Data]        <------->      [Application Data]

                    Figure 2: TLS Handshake with 0-RTT

   Two additional variations on this basic handshake exchange are
   relevant to this document:

   o  The server can respond to a ClientHello with a HelloRetryRequest,
      which adds an additional round trip prior to the basic exchange.
      This is needed if the server wishes to request a different key
      exchange key from the client.  HelloRetryRequest might also be
      used to verify that the client is correctly able to receive
      packets on the address it claims to have (see Section 4.2).

   o  A pre-shared key mode can be used for subsequent handshakes to
      avoid public key operations.  (FFS: 0-RTT for PSK seems feasible,
      but it isn't clearly defined right now).

3.  QUIC over TLS Structure

   QUIC completes its cryptographic handshake on stream 1, which means
   that the negotiation of keying material happens within the QUIC
   protocol.  QUIC over TLS does the same, relying on the ordered
   delivery guarantees provided by QUIC to ensure that the TLS handshake
   packets are delivered reliably and in order.








Thomson                Expires September 17, 2016               [Page 5]

Internet-Draft                QUIC over TLS                   March 2016


      +-----+---------+
      | TLS |  HTTP   |
      +-----+----------+------------+
      |    Streams     | Congestion |
      +----------------+------------+
      |          Frames             |
      |                +------------+
      |                |    FEC     +--------+
      |     +----------+------------+ Public |
      |     | TLS Record Protection | Reset  |
      +-----+-----------------------+--------+
      |               Envelope               |
      +--------------------------------------+
      |                 UDP                  |
      +--------------------------------------+

                         Figure 3: QUIC over DTLS

   In this design the QUIC envelope carries QUIC frames until the TLS
   handshake completes.  After the handshake successfully completes the
   key exchange, QUIC frames are then protected by TLS record
   protection.

   QUIC stream 1 is used to exchange TLS handshake packets.  QUIC
   provides for reliable and in-order delivery of the TLS handshake
   messages.

   Prior to the completion of the TLS handshake, QUIC frames can be
   exchanged.  However, these frames are not authenticated or
   confidentiality protected.  Section 6 covers some of the implications
   of this design.

   Alternative Design:  TLS could be used to protect the entire QUIC
      envelope.  QUIC version negotiation could be subsumed by TLS and
      ALPN [RFC7301].  The only unprotected packets are then public
      resets and ACK frames, both of which could be given first octet
      values that would easily distinguish them from other TLS packets.

4.  Mapping of QUIC to QUIC over TLS

   Several changes to the structure of QUIC are necessary to make a
   layered design practical.

   These changes produce the handshake shown in Figure 4.  Once
   complete, QUIC frames and forward error control (FEC) messages are
   encapsulated in using TLS record protection.





Thomson                Expires September 17, 2016               [Page 6]

Internet-Draft                QUIC over TLS                   March 2016


       Client                                             Server

      QUIC STREAM Frame (1)
       ClientHello
        + QUIC Setup Parameters
        + ALPN ("quic")
      (Finished)
      (Replayable QUIC Frames)
      (end_of_early_data)        -------->
                                            QUIC STREAM Frame (1)
                                                     ServerHello
                                            {EncryptedExtensions}
                                            {ServerConfiguration}
                                                    {Certificate}
                                              {CertificateVerify}
                                                       {Finished}
                                <--------       [QUIC Frames/FEC]
      {Finished}                -------->

      [QUIC Frames/FEC]         <------->       [QUIC Frames/FEC]

                     Figure 4: QUIC over TLS Handshake

   The remainder of this document describes the changes to QUIC and TLS
   that allow the protocols to operate together.

4.1.  Protocol and Version Negotiation

   The QUIC version negotiation mechanism is used to negotiate the
   version of QUIC that is used prior to the completion of the
   handshake.  However, this packet is not authenticated, enabling an
   active attacker to force a version downgrade.

   Each QUIC version has an equivalent Application Layer Protocol
   Negotiation (ALPN) [RFC7301] label defined.  If the version that is
   negotiated by QUIC subsequently disagrees with the version negotiated
   using ALPN, then the handshake MUST be terminated with a fatal error.

   The following versions are defined:

                       +------------+--------------+
                       | ALPN label | QUIC version |
                       +------------+--------------+
                       | "quic-xx"  | 0x12345678   |
                       |            |              |
                       | "quic-yy"  | 0x90abcedf   |
                       +------------+--------------+




Thomson                Expires September 17, 2016               [Page 7]

Internet-Draft                QUIC over TLS                   March 2016


4.2.  Source Address Validation

   QUIC implementations describe a source address token.  This is an
   opaque blob that a server provides to clients when they first use a
   given source address.  The client returns this token in subsequent
   messages as a return routeability check.  That is, the client returns
   this token to prove that it is able to receive packets at the source
   address that it claims.

   Since this token is opaque and consumed only by the server, it can be
   included in the TLS 1.3 configuration identifier for 0-RTT
   handshakes.  Servers that use 0-RTT are advised to provide new
   configuration identifiers after every handshake to avoid passive
   linkability of connections from the same client.

   A server that is under load might include the same information in the
   cookie extension/field of a HelloRetryRequest.  (Note: the current
   version of TLS 1.3 does not include the ability to include a cookie
   in HelloRetryRequest.)

5.  Record Protection

   Each TLS record is encapsulated in the QUIC envelope.  This provides
   length information, which means that the length field can be dropped
   from the TLS record.

   The sequence number used by TLS record protection is changed to deal
   with the potential for packets to be dropped or lost.  The QUIC
   sequence number is used in place of the monotonically increasing TLS
   record sequence number.

   This represents a significant change to TLS record protection and the
   guarantees that it provides.  QUIC has a single, contiguous sequence
   number space.  In comparison, TLS restarts its sequence number each
   time that record protection keys are changed.

   The restart in TLS ensures that a compromise of the current traffic
   keys does not allow an attacker to truncate the data that is sent
   after a key update by sending additional packets under the old key
   (causing new packets to be discarded).  In comparison, QUIC does not
   rely on this having integrity for a continuous sequence of
   application data packets.  Since QUIC is UDP-based, it is trivial for
   either an attacker or random chance to cause truncation of the
   squence of packets at any time.

   QUIC deals with this by providing authenticated repair mechansims
   that operate above the layer of encryption.  QUIC can therefore
   operate without restarting sequence numbers.



Thomson                Expires September 17, 2016               [Page 8]

Internet-Draft                QUIC over TLS                   March 2016


5.1.  Key Update

   Each time that the TLS record protection keys are changed, the
   message initiating the change could be lost.  This results in
   subsequent packets being indecipherable to the peer that receives
   them.  Key changes happen during the handshake directly after
   ClientHello or ServerHello messages and they occur immediately after
   a KeyUpdate message.

   TLS relies on an ordered, reliable transport and therefore provides
   no other mechanism to ensure that a peer receives the message
   initiating a key change prior to receiving the subsequent messages
   that are protected using the new key.

   A peer that receives an indecipherable packet immediately following a
   lost packet is therefore required to test whether the incoming packet
   can be decrypted under an imminent traffic key.  If the packet cannot
   be decrypted, then it is dropped.  If the packet can be decrypted
   under the new traffic key, it MUST switch to using that new traffic
   key for all subsequent packets.

   This logic isn't necessary for a server receiving a ClientHello.  In
   that case, the client cannot send encrypted data until it receives a
   ServerHello.  If a ClientHello is dropped, then any 0-RTT data that
   is sent by the client cannot be decrypted and is discarded.

   Key update messages MUST still be sent reliably, even though a peer
   can operate without receiving the message.  A peer MUST NOT
   speculatively decrypt packets until it has sent an acknowledgment for
   the key update (or handshake message) that caused the current record
   protection keys to be emplaced.

   To limit the number of keys that a receiver needs to test, a peer
   MUST await a positive acknowledgement for a key update message before
   sending another.  Also, a peer MUST await the completion of the TLS
   handshake before initiating a key update.

   Note:  This section doesn't deal with partial loss of these packets
      for simplicity reasons.  It would be highly unlikely that these
      packets would be large enough to warrant fragmentation such that
      partial data could be recovered and used to derive traffic keys.

6.  Pre-handshake QUIC Messages

   Implementations MUST NOT exchange data on any stream other than
   stream 1 prior to the TLS handshake completing.  However, QUIC
   requires the use of several types of frame for managing loss
   detection and recovery.  In addition, it might be useful to use the



Thomson                Expires September 17, 2016               [Page 9]

Internet-Draft                QUIC over TLS                   March 2016


   data acquired during the exchange of unauthenticated messages for
   congestion management.

   The actions that a peer takes as a result of receiving an
   unauthenticated packet needs tobe limited.  In particular, state
   established by these packets cannot be retained once record
   protection commences.

   There are several approaches possible for dealing with
   unauthenticated packets prior to handshake completion:

   o  discard and ignore them

   o  use them, but reset any state that is established once the
      handshake completes

   o  use them and authenticate them afterwards; failing the handshake
      if they can't be authenticated

   o  save them and use them when they can be properly authenticated

   o  treat them as a fatal error

   Different strategies are appropriate for different types of data.
   This document proposes that all strategies are possible depending on
   the type of message.

   o  Transport parameters and options are made usable and authenticated
      as part of the TLS handshake (see Section 6.1 and Section 6.1.2).

   o  Most unprotected messages are treated as fatal errors when
      received except for the small number necessary to permit the
      handshake to complete (see Section 6.2).

   o  Protected packets can be discarded, but can be saved and later
      used (see Section 6.3).

6.1.  QUIC Transport Parameters

   Values that are relatively static and won't change over the duration
   of the TLS handshake can be included in the TLS handshake in Hello
   extensions.  This ensures that the values are usable immediately and
   modification is detected.

   QUIC transport parameters are added to two new extensions: the
   "quic_transport_parameters" extension and the "quic_options"
   extension.




Thomson                Expires September 17, 2016              [Page 10]

Internet-Draft                QUIC over TLS                   March 2016


   These extensions are not confidentiality-protected when sent by the
   client, but the server response is included in the
   EncryptedExtensions message and therefore encrypted.  The data
   contained is integrity protected once the handshake completes.

6.1.1.  The quic_transport_parameters Extension

   The "quic_transport_parameters" extension contains a declarative set
   of parameters that constrain the behaviour of a peer.  This includes
   the size of the stream- and connection-level flow control windows,
   plus a set of optional parameters such as the receive buffer size.

      enum {
          receive_buffer(0),
          (255)
      } QuicTransportParameterType;

      struct {
          QuicTransportParameterType type;
          uint32 value;
      } QuicTransportParameter;

      struct {
          uint32 connection_initial_window;
          uint32 stream_initial_window;
          QuicTransportParameter parameters<0..2^16-1>;
      } QuicTransportParametersExtension;

   These values can be updated once the connection has started by
   sending an authenticated -SOMETHING- frame on stream -SOMETHING-.

   Editor's Note:  It would appear that these settings are encapsulated
      in QUIC crypto messages, though the QUIC documents are unclear on
      whether a SCFG message can be sent as a top-level message.

   The QuicTransportParameterType identifiers used for this extension
   identify parameters that apply across every version of QUIC that a
   client offers to support.  That means that allocations of code points
   for any version of QUIC makes that code point unavailable to any
   other version of QUIC that can be concurrently offered by a client.

   Each code point registration has a list of QUIC versions to which it
   applies.  Multiple different semantics can be attached to a single
   code point, but they MUST identify mutually exclusive QUIC versions.
   Versions of QUIC that have different semantics for the same code
   point can't be offered simultaneously.





Thomson                Expires September 17, 2016              [Page 11]

Internet-Draft                QUIC over TLS                   March 2016


   This extension MUST be included if a QUIC version is negotiated.  A
   server MUST NOT negotiate QUIC if this extension is not present.
   This could mean that a server might consequently send a fatal
   "no_application_protocol" alert.

   Based on the values offered by a client a server MAY use the values
   in this extension to determine whether it wants to continue the
   connection, request source address validation, or reject the
   connection.  Since this extension is initially unencrypted (along
   with ALPN), the server can use the information prior to committing
   the resources needed to complete a key exchange.

   If the server decides to use QUIC, this extension MUST be included in
   the EncryptedExtensions message.

6.1.2.  The quic_options Extension

   The "quic_options" extension includes a list of options that can be
   negotiated for a given connection.  These are set during the initial
   handshake and are fixed thereafter.  These options are used to enable
   or disable optional features in the protocol.

      enum {
          (65535)
      } QuicOption;

      struct {
          QuicOption options<0..2^8-2>;
      } QuicOptionsExtension;

   The set of features that are supported across different versions
   might vary.  A client SHOULD include all options that it is willing
   to use.  The server MAY select any subset of those options that apply
   to the version of QUIC that it selects.  Only those options selected
   by the server are available for use.

   Note:  This sort of optional behaviour seems like it could be
      accommodated adequately by defining new versions of QUIC for each
      experiment.  However, as an evolving protocol, multiple
      experiments need to be conducted concurrently and continuously,
      which would overload the ALPN space.  This extension provides a
      flexible way to regulate which experiments are enabled on a per-
      connection basis.

   If the server decides to use any QUIC options, includes this
   extension in the EncryptedExtensions message.





Thomson                Expires September 17, 2016              [Page 12]

Internet-Draft                QUIC over TLS                   March 2016


6.2.  Unprotected Frames Prior to Handshake Completion

   This section describes the handling of messages that are sent and
   received prior to the completion of the TLS handshake.

   Sending and receiving unprotected messages is hazardous.  Unless
   expressly permitted, receipt of an unprotected message of any kind
   MUST be treated as a fatal error.

6.2.1.  STREAM Frames

   "STREAM" frames for stream 1 are permitted.  These carry the TLS
   handshake messages.

   Receiving unprotected "STREAM" frames that do not contain TLS
   handshake messages MUST be treated as a fatal error.

6.2.2.  ACK Frames

   "ACK" frames are permitted prior to the handshake being complete.
   However, an unauthenticated "ACK" frame can only be used to obtain
   NACK ranges.  Timestamps MUST NOT be included in an unprotected ACK
   frame, since these might be modified by an attacker with the intent
   of altering congestion control response.  Information on FEC-revived
   packets is redundant, since use of FEC in this phase is prohibited.

   "ACK" frames MAY be sent a second time once record protection is
   enabled.  Once protected, timestamps can be included.

   Editor's Note:  This prohibition might be a little too strong, but
      this is the only obviously safe option.  If the amount of damage
      that an attacker can do by modifying timestamps is limited, then
      it might be OK to permit the inclusion of timestamps.  Note that
      an attacker need not be on-path to inject an ACK.

6.2.3.  WINDOW_UPDATE Frames

   Sending a "WINDOW_UPDATE" on streams 0 or 1 might be necessary to
   permit the completion of the TLS handshake, particularly in cases
   where the certification path is lengthy.  To avoid stalling due to
   flow control exhaustion, "WINDOW_UPDATE" frames with stream 0 or 1
   are permitted.

   Receiving a "WINDOW_UPDATE" frame on any other stream MUST be treated
   as a fatal error.

   The position of the flow control window MUST be reset to defaults
   once the TLS handshake is complete.  This might result in the window



Thomson                Expires September 17, 2016              [Page 13]

Internet-Draft                QUIC over TLS                   March 2016


   position for either the connection or stream 1 being smaller than the
   number of octets that have been sent on those streams.  A
   "WINDOW_UPDATE" frame might therefore be necessary to prevent the
   connection from being stalled.

   Note:  This is only potentially problematic for servers, who might
      need to send large certificate chains.  This is unlikely given
      that QUIC - like HTTP [RFC7230] - is a protocol where the server
      is unable to exercise the opportunity to send first.

      If later modifications or extensions to QUIC permit the server to
      send first, a client might reduce the chance of stalling due to
      flow control in this first round trip by setting larger values for
      the initial stream and connection flow control windows using the
      "quic_transport_parameters" extension.

   Editor's Note:  Unlike "ACK", the prohibition on "WINDOW_UPDATE" is
      much less of an imposition on implementations.  And, given that a
      spurious "WINDOW_UPDATE" might be used to create a great deal of
      memory pressure on an endpoint, the restriction seems justifiable.
      Besides, I understand this one a lot better.

6.2.4.  FEC Packets

   FEC packets MUST NOT be sent prior to completing the TLS handshake.
   Endpoints MUST treat receipt of an unprotected FEC packet as a fatal
   error.

6.3.  Protected Frames Prior to Handshake Completion

   Due to reordering and loss, protected packets might be received by an
   endpoint before the final handshake messages are received.  If these
   can be decrypted successfully, such packets MAY be stored and used
   once the handshake is complete.

   Unless expressly permitted below, encrypted packets MUST NOT be used
   prior to completing the TLS handshake, in particular the receipt of a
   valid Finished message and any authentication of the peer.  If
   packets are processed prior to completion of the handshake, an
   attacker might use the willingness of an implementation to use these
   packets to mount attacks.

   TLS handshake messages are covered by record protection during the
   handshake, once key agreement has completed.  This means that
   protected messages need to be decrypted to determine if they are TLS
   handshake messages or not.  Similarly, "ACK" and "WINDOW_UPDATE"
   frames might be needed to successfully complete the TLS handshake.




Thomson                Expires September 17, 2016              [Page 14]

Internet-Draft                QUIC over TLS                   March 2016


   Any timestamps present in "ACK" frames MUST be ignored rather than
   causing a fatal error.  Timestamps MAY be saved and used once the TLS
   handshake completes successfully.

   An endpoint MUST save the last protected "WINDOW_UPDATE" frame it
   receives for each stream and apply the values once the TLS handshake
   completes.

   Editor's Note:  Ugh.  This last one is pretty ugly.  Maybe we should
      just make the TLS handshake exempt from flow control up to the
      Finished message.  Then we can prohibit unauthenticated
      "WINDOW_UPDATE" messages.  We would still likely want to account
      for the packets sent and received, since to do otherwise would
      create some hairy special cases.  That means that stalling is
      possible, but it means that we can avoid ugly rules like the
      above.

7.  QUIC Connection ID

   The connection identifier serves to identify a connection and to
   allow a server to resume an existing connection from a new client
   address in case of mobility events.  However, this creates an
   identifier that a passive observer [RFC7258] can use to correlate
   connections.

   TLS 1.3 offers connection resumption using pre-shared keys, which can
   permit a client to send 0-RTT application data (Note: this is an open
   issue in TLS).  This mode could be used to continue a connection
   rather than rely on a publicly visible correlator.  This only
   requires that servers produce a new ticket on every connection and
   that clients do not resume from the same ticket more than once.

   The advantage of relying on 0-RTT modes for mobility events is that
   this is also more robust.  If the new point of attachment results in
   contacting a new server instance - one that lacks the session state -
   then a fallback is easy.

   The main drawback with a clean restart or anything resembling a
   restart is that accumulated state can be lost.  In particular, the
   state of the HPACK header compression table can be quite valuable.
   Note that some QUIC implementations use part of the connection ID to
   identify the server that is handling the connection, enabling routing
   to that server and avoiding this sort of problem.

   A lightweight state resurrection extension might be used to avoid
   having to recreate any expensive state.





Thomson                Expires September 17, 2016              [Page 15]

Internet-Draft                QUIC over TLS                   March 2016


   Editor's Note:  It's not clear how mobility and public reset
      interact.  If the goal is to allow public reset messages to be
      sent by on-path entities, then using a connection ID to move a
      connection to a new path results in any entities on the new path
      not seeing the start of the connection and the nonce they need to
      generate the public reset.  A connection restart would avoid this
      issue.

8.  Security Considerations

   There are likely to be some real clangers here eventually, but the
   current set of issues is well captured in the relevant sections of
   the main text.

   Never assume that because it isn't in the security considerations
   section it doesn't affect security.  Most of this document does.

9.  IANA Considerations

   This document has no IANA actions.

   - back

10.  Acknowledgments

   Christian Huitema's knowledge of QUIC is far better than my own.
   This would be even more inaccurate and useless if not for his
   assistance.  This document has variously benefited from a long series
   of discussions with Ryan Hamilton, Jana Iyengar, Adam Langley,
   Roberto Peon, Ian Swett, and likely many others who are merely
   forgotten by a faulty meat computer.

11.  References

11.1.  Normative References

   [I-D.ietf-tls-tls13]
              Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", draft-ietf-tls-tls13-11 (work in progress),
              December 2015.

   [I-D.tsvwg-quic-protocol]
              Hamilton, R., Iyengar, J., Swett, I., and A. Wilk, "QUIC:
              A UDP-Based Secure and Reliable Transport for HTTP/2",
              draft-tsvwg-quic-protocol-02 (work in progress), January
              2016.





Thomson                Expires September 17, 2016              [Page 16]

Internet-Draft                QUIC over TLS                   March 2016


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC7301]  Friedl, S., Popov, A., Langley, A., and E. Stephan,
              "Transport Layer Security (TLS) Application-Layer Protocol
              Negotiation Extension", RFC 7301, DOI 10.17487/RFC7301,
              July 2014, <http://www.rfc-editor.org/info/rfc7301>.

11.2.  Informative References

   [RFC0793]  Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, DOI 10.17487/RFC0793, September 1981,
              <http://www.rfc-editor.org/info/rfc793>.

   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.
              Norrman, "The Secure Real-time Transport Protocol (SRTP)",
              RFC 3711, DOI 10.17487/RFC3711, March 2004,
              <http://www.rfc-editor.org/info/rfc3711>.

   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,
              "Session Traversal Utilities for NAT (STUN)", RFC 5389,
              DOI 10.17487/RFC5389, October 2008,
              <http://www.rfc-editor.org/info/rfc5389>.

   [RFC5764]  McGrew, D. and E. Rescorla, "Datagram Transport Layer
              Security (DTLS) Extension to Establish Keys for the Secure
              Real-time Transport Protocol (SRTP)", RFC 5764,
              DOI 10.17487/RFC5764, May 2010,
              <http://www.rfc-editor.org/info/rfc5764>.

   [RFC6347]  Rescorla, E. and N. Modadugu, "Datagram Transport Layer
              Security Version 1.2", RFC 6347, DOI 10.17487/RFC6347,
              January 2012, <http://www.rfc-editor.org/info/rfc6347>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

   [RFC7258]  Farrell, S. and H. Tschofenig, "Pervasive Monitoring Is an
              Attack", BCP 188, RFC 7258, DOI 10.17487/RFC7258, May
              2014, <http://www.rfc-editor.org/info/rfc7258>.







Thomson                Expires September 17, 2016              [Page 17]

Internet-Draft                QUIC over TLS                   March 2016


   [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
              Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
              DOI 10.17487/RFC7540, May 2015,
              <http://www.rfc-editor.org/info/rfc7540>.

Author's Address

   Martin Thomson
   Mozilla

   Email: martin.thomson@gmail.com








































Thomson                Expires September 17, 2016              [Page 18]
